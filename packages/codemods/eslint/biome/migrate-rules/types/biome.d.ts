/**MIT License
 * 
 * Copyright (c) 2023 Biome Developers and Contributors.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
*/
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type PlainIndentStyle = "tab" | "space";
export type LineEnding = "lf" | "crlf" | "cr";
/**
 * Validated value for the `line_width` formatter options
 *
 * The allowed range of values is 1..=320
 */
export type LineWidth = number;
export type QuoteStyle = "double" | "single";
export type StringSet = string[];
export type ArrowParentheses = "always" | "asNeeded";
export type QuoteProperties = "asNeeded" | "preserve";
export type Semicolons = "always" | "asNeeded";
/**
 * Print trailing commas wherever possible in multi-line comma-separated syntactic structures.
 */
export type TrailingComma = "all" | "es5" | "none";
export type RuleConfiguration = RulePlainConfiguration | RuleWithOptions;
export type RulePlainConfiguration = "warn" | "error" | "off";
export type PossibleOptions =
  | ComplexityOptions
  | ConsistentArrayTypeOptions
  | FilenamingConventionOptions
  | HooksOptions
  | DeprecatedHooksOptions
  | NamingConventionOptions
  | RestrictedGlobalsOptions
  | ValidAriaRoleOptions;
export type ConsistentArrayType = "shorthand" | "generic";
/**
 * Supported cases for TypeScript `enum` member names.
 */
export type FilenameCase = "camelCase" | "export" | "kebab-case" | "PascalCase" | "snake_case";
export type FilenameCases = FilenameCase[];
/**
 * Supported cases for TypeScript `enum` member names.
 */
export type EnumMemberCase = "PascalCase" | "CONSTANT_CASE" | "camelCase";
export type Overrides = OverridePattern[];
export type VcsClientKind = "git";

/**
 * The configuration that is contained inside the file `biome.json`
 */
export interface Configuration {
  /**
   * A field for the [JSON schema](https://json-schema.org/) specification
   */
  $schema?: string | null;
  /**
   * Specific configuration for the Css language
   */
  css?: CssConfiguration | null;
  /**
   * A list of paths to other JSON files, used to extends the current configuration.
   */
  extends?: StringSet | null;
  /**
   * The configuration of the filesystem
   */
  files?: FilesConfiguration | null;
  /**
   * The configuration of the formatter
   */
  formatter?: FormatterConfiguration | null;
  /**
   * Specific configuration for the JavaScript language
   */
  javascript?: JavascriptConfiguration | null;
  /**
   * Specific configuration for the Json language
   */
  json?: JsonConfiguration | null;
  /**
   * The configuration for the linter
   */
  linter?: LinterConfiguration | null;
  /**
   * The configuration of the import sorting
   */
  organizeImports?: OrganizeImports | null;
  /**
   * A list of granular patterns that should be applied only to a sub set of files
   */
  overrides?: Overrides | null;
  /**
   * The configuration of the VCS integration
   */
  vcs?: VcsConfiguration | null;
}
/**
 * Options applied to CSS files
 */
export interface CssConfiguration {
  /**
   * Formatting options
   */
  formatter?: CssFormatter | null;
  /**
   * Parsing options
   */
  parser?: CssParser | null;
}
export interface CssFormatter {
  /**
   * Control the formatter for CSS (and its super languages) files.
   */
  enabled?: boolean | null;
  /**
   * The size of the indentation applied to CSS (and its super languages) files. Default to 2.
   */
  indentSize?: number | null;
  /**
   * The indent style applied to CSS (and its super languages) files.
   */
  indentStyle?: PlainIndentStyle | null;
  /**
   * The size of the indentation applied to CSS (and its super languages) files. Default to 2.
   */
  indentWidth?: number | null;
  /**
   * The type of line ending applied to CSS (and its super languages) files.
   */
  lineEnding?: LineEnding | null;
  /**
   * What's the max width of a line applied to CSS (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null;
  quoteStyle?: QuoteStyle | null;
}
/**
 * Options that changes how the CSS parser behaves
 */
export interface CssParser {
  /**
   * Allow comments to appear on incorrect lines in `.css` files
   */
  allowWrongLineComments?: boolean | null;
}
/**
 * The configuration of the filesystem
 */
export interface FilesConfiguration {
  /**
   * A list of Unix shell style patterns. Biome will ignore files/folders that will match these patterns.
   */
  ignore?: StringSet | null;
  /**
   * Tells Biome to not emit diagnostics when handling files that doesn't know
   */
  ignoreUnknown?: boolean | null;
  /**
   * A list of Unix shell style patterns. Biome will handle only those files/folders that will match these patterns.
   */
  include?: StringSet | null;
  /**
   * The maximum allowed size for source code files in bytes. Files above this limit will be ignored for performance reasons. Defaults to 1 MiB
   */
  maxSize?: number | null;
}
/**
 * Generic options applied to all files
 */
export interface FormatterConfiguration {
  enabled?: boolean | null;
  /**
   * Stores whether formatting should be allowed to proceed if a given file has syntax errors
   */
  formatWithErrors?: boolean | null;
  /**
   * A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns.
   */
  ignore?: StringSet | null;
  /**
   * A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns.
   */
  include?: StringSet | null;
  /**
   * The size of the indentation, 2 by default (deprecated, use `indent-width`)
   */
  indentSize?: number | null;
  /**
   * The indent style.
   */
  indentStyle?: PlainIndentStyle | null;
  /**
   * The size of the indentation, 2 by default
   */
  indentWidth?: number | null;
  /**
   * The type of line ending.
   */
  lineEnding?: LineEnding | null;
  /**
   * What's the max width of a line. Defaults to 80.
   */
  lineWidth?: LineWidth | null;
}
/**
 * A set of options applied to the JavaScript files
 */
export interface JavascriptConfiguration {
  /**
   * Formatting options
   */
  formatter?: JavascriptFormatter | null;
  /**
   * A list of global bindings that should be ignored by the analyzers
   *
   * If defined here, they should not emit diagnostics.
   */
  globals?: StringSet | null;
  organize_imports?: JavascriptOrganizeImports | null;
  /**
   * Parsing options
   */
  parser?: JavascriptParser | null;
}
/**
 * Formatting options specific to the JavaScript files
 */
export interface JavascriptFormatter {
  /**
   * Whether to add non-necessary parentheses to arrow functions. Defaults to "always".
   */
  arrowParentheses?: ArrowParentheses | null;
  /**
   * Whether to hug the closing bracket of multiline HTML/JSX tags to the end of the last line, rather than being alone on the following line. Defaults to false.
   */
  bracketSameLine?: boolean | null;
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: boolean | null;
  /**
   * Control the formatter for JavaScript (and its super languages) files.
   */
  enabled?: boolean | null;
  /**
   * The size of the indentation applied to JavaScript (and its super languages) files. Default to 2.
   */
  indentSize?: number | null;
  /**
   * The indent style applied to JavaScript (and its super languages) files.
   */
  indentStyle?: PlainIndentStyle | null;
  /**
   * The size of the indentation applied to JavaScript (and its super languages) files. Default to 2.
   */
  indentWidth?: number | null;
  /**
   * The type of quotes used in JSX. Defaults to double.
   */
  jsxQuoteStyle?: QuoteStyle | null;
  /**
   * The type of line ending applied to JavaScript (and its super languages) files.
   */
  lineEnding?: LineEnding | null;
  /**
   * What's the max width of a line applied to JavaScript (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null;
  /**
   * When properties in objects are quoted. Defaults to asNeeded.
   */
  quoteProperties?: QuoteProperties | null;
  /**
   * The type of quotes used in JavaScript code. Defaults to double.
   */
  quoteStyle?: QuoteStyle | null;
  /**
   * Whether the formatter prints semicolons for all statements or only in for statements where it is necessary because of ASI.
   */
  semicolons?: Semicolons | null;
  /**
   * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "all".
   */
  trailingComma?: TrailingComma | null;
}
export interface JavascriptOrganizeImports {}
/**
 * Options that changes how the JavaScript parser behaves
 */
export interface JavascriptParser {
  /**
   * It enables the experimental and unsafe parsing of parameter decorators
   *
   * These decorators belong to an old proposal, and they are subject to change.
   */
  unsafeParameterDecoratorsEnabled?: boolean | null;
}
/**
 * Options applied to JSON files
 */
export interface JsonConfiguration {
  /**
   * Formatting options
   */
  formatter?: JsonFormatter | null;
  /**
   * Parsing options
   */
  parser?: JsonParser | null;
}
export interface JsonFormatter {
  /**
   * Control the formatter for JSON (and its super languages) files.
   */
  enabled?: boolean | null;
  /**
   * The size of the indentation applied to JSON (and its super languages) files. Default to 2.
   */
  indentSize?: number | null;
  /**
   * The indent style applied to JSON (and its super languages) files.
   */
  indentStyle?: PlainIndentStyle | null;
  /**
   * The size of the indentation applied to JSON (and its super languages) files. Default to 2.
   */
  indentWidth?: number | null;
  /**
   * The type of line ending applied to JSON (and its super languages) files.
   */
  lineEnding?: LineEnding | null;
  /**
   * What's the max width of a line applied to JSON (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null;
}
/**
 * Options that changes how the JSON parser behaves
 */
export interface JsonParser {
  /**
   * Allow parsing comments in `.json` files
   */
  allowComments?: boolean | null;
  /**
   * Allow parsing trailing commas in `.json` files
   */
  allowTrailingCommas?: boolean | null;
}
export interface LinterConfiguration {
  /**
   * if `false`, it disables the feature and the linter won't be executed. `true` by default
   */
  enabled?: boolean | null;
  /**
   * A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns.
   */
  ignore?: StringSet | null;
  /**
   * A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns.
   */
  include?: StringSet | null;
  /**
   * List of rules
   */
  rules?: Rules | null;
}
export interface Rules {
  a11y?: A11Y | null;
  /**
   * It enables ALL rules. The rules that belong to `nursery` won't be enabled.
   */
  all?: boolean | null;
  complexity?: Complexity | null;
  correctness?: Correctness | null;
  nursery?: Nursery | null;
  performance?: Performance | null;
  /**
   * It enables the lint rules recommended by Biome. `true` by default.
   */
  recommended?: boolean | null;
  security?: Security | null;
  style?: Style | null;
  suspicious?: Suspicious | null;
}
/**
 * A list of rules that belong to this group
 */
export interface A11Y {
  /**
   * It enables ALL rules for this group.
   */
  all?: boolean | null;
  /**
   * Enforce that the accessKey attribute is not used on any HTML element.
   */
  noAccessKey?: RuleConfiguration | null;
  /**
   * Enforce that aria-hidden="true" is not set on focusable elements.
   */
  noAriaHiddenOnFocusable?: RuleConfiguration | null;
  /**
   * Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.
   */
  noAriaUnsupportedElements?: RuleConfiguration | null;
  /**
   * Enforce that autoFocus prop is not used on elements.
   */
  noAutofocus?: RuleConfiguration | null;
  /**
   * Disallow target="_blank" attribute without rel="noreferrer"
   */
  noBlankTarget?: RuleConfiguration | null;
  /**
   * Enforces that no distracting elements are used.
   */
  noDistractingElements?: RuleConfiguration | null;
  /**
   * The scope prop should be used only on <th> elements.
   */
  noHeaderScope?: RuleConfiguration | null;
  /**
   * Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements.
   */
  noInteractiveElementToNoninteractiveRole?: RuleConfiguration | null;
  /**
   * Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements.
   */
  noNoninteractiveElementToInteractiveRole?: RuleConfiguration | null;
  /**
   * Enforce that tabIndex is not assigned to non-interactive HTML elements.
   */
  noNoninteractiveTabindex?: RuleConfiguration | null;
  /**
   * Prevent the usage of positive integers on tabIndex property
   */
  noPositiveTabindex?: RuleConfiguration | null;
  /**
   * Enforce img alt prop does not contain the word "image", "picture", or "photo".
   */
  noRedundantAlt?: RuleConfiguration | null;
  /**
   * Enforce explicit role property is not the same as implicit/default role property on an element.
   */
  noRedundantRoles?: RuleConfiguration | null;
  /**
   * Enforces the usage of the title element for the svg element.
   */
  noSvgWithoutTitle?: RuleConfiguration | null;
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null;
  /**
   * Enforce that all elements that require alternative text have meaningful information to relay back to the end user.
   */
  useAltText?: RuleConfiguration | null;
  /**
   * Enforce that anchors have content and that the content is accessible to screen readers.
   */
  useAnchorContent?: RuleConfiguration | null;
  /**
   * Enforce that tabIndex is assigned to non-interactive HTML elements with aria-activedescendant.
   */
  useAriaActivedescendantWithTabindex?: RuleConfiguration | null;
  /**
   * Enforce that elements with ARIA roles must have all required ARIA attributes for that role.
   */
  useAriaPropsForRole?: RuleConfiguration | null;
  /**
   * Enforces the usage of the attribute type for the element button
   */
  useButtonType?: RuleConfiguration | null;
  /**
   * Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop.
   */
  useHeadingContent?: RuleConfiguration | null;
  /**
   * Enforce that html element has lang attribute.
   */
  useHtmlLang?: RuleConfiguration | null;
  /**
   * Enforces the usage of the attribute title for the element iframe.
   */
  useIframeTitle?: RuleConfiguration | null;
  /**
   * Enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.
   */
  useKeyWithClickEvents?: RuleConfiguration | null;
  /**
   * Enforce onMouseOver / onMouseOut are accompanied by onFocus / onBlur.
   */
  useKeyWithMouseEvents?: RuleConfiguration | null;
  /**
   * Enforces that audio and video elements must have a track for captions.
   */
  useMediaCaption?: RuleConfiguration | null;
  /**
   * Enforce that all anchors are valid, and they are navigable elements.
   */
  useValidAnchor?: RuleConfiguration | null;
  /**
   * Ensures that ARIA properties aria-* are all valid.
   */
  useValidAriaProps?: RuleConfiguration | null;
  /**
   * Elements with ARIA roles must use a valid, non-abstract ARIA role.
   */
  useValidAriaRole?: RuleConfiguration | null;
  /**
   * Enforce that ARIA state and property values are valid.
   */
  useValidAriaValues?: RuleConfiguration | null;
  /**
   * Ensure that the attribute passed to the lang attribute is a correct ISO language and/or country.
   */
  useValidLang?: RuleConfiguration | null;
  [k: string]: unknown;
}
export interface RuleWithOptions {
  level: RulePlainConfiguration;
  options?: PossibleOptions | null;
}
/**
 * Options for the rule `noExcessiveCognitiveComplexity`.
 */
export interface ComplexityOptions {
  /**
   * The maximum complexity score that we allow. Anything higher is considered excessive.
   */
  maxAllowedComplexity: number;
}
export interface ConsistentArrayTypeOptions {
  syntax: ConsistentArrayType;
}
/**
 * Rule's options.
 */
export interface FilenamingConventionOptions {
  /**
   * Allowed cases for _TypeScript_ `enum` member names.
   */
  filenameCases?: FilenameCases;
  /**
   * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
   */
  strictCase?: boolean;
}
/**
 * Options for the rule `useExhaustiveDependencies`
 */
export interface HooksOptions {
  /**
   * List of safe hooks
   */
  hooks: Hooks[];
}
export interface Hooks {
  /**
   * The "position" of the closure function, starting from zero.
   *
   * ### Example
   */
  closureIndex?: number | null;
  /**
   * The "position" of the array of dependencies, starting from zero.
   */
  dependenciesIndex?: number | null;
  /**
   * The name of the hook
   */
  name: string;
}
/**
 * Options for the `useHookAtTopLevel` rule have been deprecated, since we now use the React hook naming convention to determine whether a function is a hook.
 */
export interface DeprecatedHooksOptions {}
/**
 * Rule's options.
 */
export interface NamingConventionOptions {
  /**
   * Allowed cases for _TypeScript_ `enum` member names.
   */
  enumMemberCase?: EnumMemberCase;
  /**
   * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
   */
  strictCase?: boolean;
}
/**
 * Options for the rule `noRestrictedGlobals`.
 */
export interface RestrictedGlobalsOptions {
  /**
   * A list of names that should trigger the rule
   */
  deniedGlobals: string[];
}
export interface ValidAriaRoleOptions {
  allowInvalidRoles: string[];
  ignoreNonDom: boolean;
}
/**
 * A list of rules that belong to this group
 */
export interface Complexity {
  /**
   * It enables ALL rules for this group.
   */
  all?: boolean | null;
  /**
   * Disallow primitive type aliases and misleading types.
   */
  noBannedTypes?: RuleConfiguration | null;
  /**
   * Disallow functions that exceed a given Cognitive Complexity score.
   */
  noExcessiveCognitiveComplexity?: RuleConfiguration | null;
  /**
   * Disallow unnecessary boolean casts
   */
  noExtraBooleanCast?: RuleConfiguration | null;
  /**
   * Prefer for...of statement instead of Array.forEach.
   */
  noForEach?: RuleConfiguration | null;
  /**
   * Disallow unclear usage of consecutive space characters in regular expression literals
   */
  noMultipleSpacesInRegularExpressionLiterals?: RuleConfiguration | null;
  /**
   * This rule reports when a class has no non-static members, such as for a class used exclusively as a static namespace.
   */
  noStaticOnlyClass?: RuleConfiguration | null;
  /**
   * Disallow this and super in static contexts.
   */
  noThisInStatic?: RuleConfiguration | null;
  /**
   * Disallow unnecessary catch clauses.
   */
  noUselessCatch?: RuleConfiguration | null;
  /**
   * Disallow unnecessary constructors.
   */
  noUselessConstructor?: RuleConfiguration | null;
  /**
   * Disallow empty exports that don't change anything in a module file.
   */
  noUselessEmptyExport?: RuleConfiguration | null;
  /**
   * Disallow unnecessary fragments
   */
  noUselessFragments?: RuleConfiguration | null;
  /**
   * Disallow unnecessary labels.
   */
  noUselessLabel?: RuleConfiguration | null;
  /**
   * Disallow renaming import, export, and destructured assignments to the same name.
   */
  noUselessRename?: RuleConfiguration | null;
  /**
   * Disallow useless case in switch statements.
   */
  noUselessSwitchCase?: RuleConfiguration | null;
  /**
   * Disallow useless this aliasing.
   */
  noUselessThisAlias?: RuleConfiguration | null;
  /**
   * Disallow using any or unknown as type constraint.
   */
  noUselessTypeConstraint?: RuleConfiguration | null;
  /**
   * Disallow the use of void operators, which is not a familiar operator.
   */
  noVoid?: RuleConfiguration | null;
  /**
   * Disallow with statements in non-strict contexts.
   */
  noWith?: RuleConfiguration | null;
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null;
  /**
   * Use arrow functions over function expressions.
   */
  useArrowFunction?: RuleConfiguration | null;
  /**
   * Promotes the use of .flatMap() when map().flat() are used together.
   */
  useFlatMap?: RuleConfiguration | null;
  /**
   * Enforce the usage of a literal access to properties over computed property access.
   */
  useLiteralKeys?: RuleConfiguration | null;
  /**
   * Enforce using concise optional chain instead of chained logical expressions.
   */
  useOptionalChain?: RuleConfiguration | null;
  /**
   * Enforce the use of the regular expression literals instead of the RegExp constructor if possible.
   */
  useRegexLiterals?: RuleConfiguration | null;
  /**
   * Disallow number literal object member names which are not base10 or uses underscore as separator
   */
  useSimpleNumberKeys?: RuleConfiguration | null;
  /**
   * Discard redundant terms from logical expressions.
   */
  useSimplifiedLogicExpression?: RuleConfiguration | null;
  [k: string]: unknown;
}
/**
 * A list of rules that belong to this group
 */
export interface Correctness {
  /**
   * It enables ALL rules for this group.
   */
  all?: boolean | null;
  /**
   * Prevent passing of children as props.
   */
  noChildrenProp?: RuleConfiguration | null;
  /**
   * Prevents from having const variables being re-assigned.
   */
  noConstAssign?: RuleConfiguration | null;
  /**
   * Disallow constant expressions in conditions
   */
  noConstantCondition?: RuleConfiguration | null;
  /**
   * Disallow returning a value from a constructor.
   */
  noConstructorReturn?: RuleConfiguration | null;
  /**
   * Disallow empty character classes in regular expression literals.
   */
  noEmptyCharacterClassInRegex?: RuleConfiguration | null;
  /**
   * Disallows empty destructuring patterns.
   */
  noEmptyPattern?: RuleConfiguration | null;
  /**
   * Disallow calling global object properties as functions
   */
  noGlobalObjectCalls?: RuleConfiguration | null;
  /**
   * Disallow function and var declarations that are accessible outside their block.
   */
  noInnerDeclarations?: RuleConfiguration | null;
  /**
   * Prevents the incorrect use of super() inside classes. It also checks whether a call super() is missing from classes that extends other constructors.
   */
  noInvalidConstructorSuper?: RuleConfiguration | null;
  /**
   * Disallow new operators with global non-constructor functions.
   */
  noInvalidNewBuiltin?: RuleConfiguration | null;
  /**
   * Disallow new operators with the Symbol object.
   */
  noNewSymbol?: RuleConfiguration | null;
  /**
   * Disallow \8 and \9 escape sequences in string literals.
   */
  noNonoctalDecimalEscape?: RuleConfiguration | null;
  /**
   * Disallow literal numbers that lose precision
   */
  noPrecisionLoss?: RuleConfiguration | null;
  /**
   * Prevent the usage of the return value of React.render.
   */
  noRenderReturnValue?: RuleConfiguration | null;
  /**
   * Disallow assignments where both sides are exactly the same.
   */
  noSelfAssign?: RuleConfiguration | null;
  /**
   * Disallow returning a value from a setter
   */
  noSetterReturn?: RuleConfiguration | null;
  /**
   * Disallow comparison of expressions modifying the string case with non-compliant value.
   */
  noStringCaseMismatch?: RuleConfiguration | null;
  /**
   * Disallow lexical declarations in switch clauses.
   */
  noSwitchDeclarations?: RuleConfiguration | null;
  /**
   * Prevents the usage of variables that haven't been declared inside the document.
   */
  noUndeclaredVariables?: RuleConfiguration | null;
  /**
   * Avoid using unnecessary continue.
   */
  noUnnecessaryContinue?: RuleConfiguration | null;
  /**
   * Disallow unreachable code
   */
  noUnreachable?: RuleConfiguration | null;
  /**
   * Ensures the super() constructor is called exactly once on every code  path in a class constructor before this is accessed if the class has a superclass
   */
  noUnreachableSuper?: RuleConfiguration | null;
  /**
   * Disallow control flow statements in finally blocks.
   */
  noUnsafeFinally?: RuleConfiguration | null;
  /**
   * Disallow the use of optional chaining in contexts where the undefined value is not allowed.
   */
  noUnsafeOptionalChaining?: RuleConfiguration | null;
  /**
   * Disallow unused labels.
   */
  noUnusedLabels?: RuleConfiguration | null;
  /**
   * Disallow unused variables.
   */
  noUnusedVariables?: RuleConfiguration | null;
  /**
   * This rules prevents void elements (AKA self-closing elements) from having children.
   */
  noVoidElementsWithChildren?: RuleConfiguration | null;
  /**
   * Disallow returning a value from a function with the return type 'void'
   */
  noVoidTypeReturn?: RuleConfiguration | null;
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null;
  /**
   * Enforce all dependencies are correctly specified in a React hook.
   */
  useExhaustiveDependencies?: RuleConfiguration | null;
  /**
   * Enforce that all React hooks are being called from the Top Level component functions.
   */
  useHookAtTopLevel?: RuleConfiguration | null;
  /**
   * Require calls to isNaN() when checking for NaN.
   */
  useIsNan?: RuleConfiguration | null;
  /**
   * Enforce "for" loop update clause moving the counter in the right direction.
   */
  useValidForDirection?: RuleConfiguration | null;
  /**
   * Require generator functions to contain yield.
   */
  useYield?: RuleConfiguration | null;
  [k: string]: unknown;
}
/**
 * A list of rules that belong to this group
 */
export interface Nursery {
  /**
   * It enables ALL rules for this group.
   */
  all?: boolean | null;
  /**
   * Disallow two keys with the same name inside a JSON object.
   */
  noDuplicateJsonKeys?: RuleConfiguration | null;
  /**
   * Disallow empty block statements and static blocks.
   */
  noEmptyBlockStatements?: RuleConfiguration | null;
  /**
   * Disallow empty type parameters in type aliases and interfaces.
   */
  noEmptyTypeParameters?: RuleConfiguration | null;
  /**
   * Disallow assignments to native objects and read-only global variables.
   */
  noGlobalAssign?: RuleConfiguration | null;
  /**
   * Disallow the use of global eval().
   */
  noGlobalEval?: RuleConfiguration | null;
  /**
   * Disallow the use of variables and function parameters before their declaration
   */
  noInvalidUseBeforeDeclaration?: RuleConfiguration | null;
  /**
   * Disallow characters made with multiple code points in character class syntax.
   */
  noMisleadingCharacterClass?: RuleConfiguration | null;
  /**
   * Forbid the use of Node.js builtin modules.
   */
  noNodejsModules?: RuleConfiguration | null;
  /**
   * Disallow then property.
   */
  noThenProperty?: RuleConfiguration | null;
  /**
   * Disallow unused imports.
   */
  noUnusedImports?: RuleConfiguration | null;
  /**
   * Disallow unused private class members
   */
  noUnusedPrivateClassMembers?: RuleConfiguration | null;
  /**
   * Disallow unnecessary nested block statements.
   */
  noUselessLoneBlockStatements?: RuleConfiguration | null;
  /**
   * Disallow ternary operators when simpler alternatives exist.
   */
  noUselessTernary?: RuleConfiguration | null;
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null;
  /**
   * Ensure async functions utilize await.
   */
  useAwait?: RuleConfiguration | null;
  /**
   * Require consistently using either T[] or Array<T>
   */
  useConsistentArrayType?: RuleConfiguration | null;
  /**
   * Promotes the use of export type for types.
   */
  useExportType?: RuleConfiguration | null;
  /**
   * Enforce naming conventions for JavaScript and TypeScript filenames.
   */
  useFilenamingConvention?: RuleConfiguration | null;
  /**
   * This rule recommends a for-of loop when in a for loop, the index used to extract an item from the iterated array.
   */
  useForOf?: RuleConfiguration | null;
  /**
   * Enforce the use of import type when an import only has specifiers with type qualifier.
   */
  useGroupedTypeImport?: RuleConfiguration | null;
  /**
   * Disallows package private imports.
   */
  useImportRestrictions?: RuleConfiguration | null;
  /**
   * Promotes the use of import type for types.
   */
  useImportType?: RuleConfiguration | null;
  /**
   * Enforces using the node: protocol for Node.js builtin modules.
   */
  useNodejsImportProtocol?: RuleConfiguration | null;
  /**
   * Use the Number properties instead of global ones.
   */
  useNumberNamespace?: RuleConfiguration | null;
  /**
   * Enforce using function types instead of object type with call signatures.
   */
  useShorthandFunctionType?: RuleConfiguration | null;
  [k: string]: unknown;
}
/**
 * A list of rules that belong to this group
 */
export interface Performance {
  /**
   * It enables ALL rules for this group.
   */
  all?: boolean | null;
  /**
   * Disallow the use of spread (...) syntax on accumulators.
   */
  noAccumulatingSpread?: RuleConfiguration | null;
  /**
   * Disallow the use of the delete operator.
   */
  noDelete?: RuleConfiguration | null;
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null;
  [k: string]: unknown;
}
/**
 * A list of rules that belong to this group
 */
export interface Security {
  /**
   * It enables ALL rules for this group.
   */
  all?: boolean | null;
  /**
   * Prevent the usage of dangerous JSX props
   */
  noDangerouslySetInnerHtml?: RuleConfiguration | null;
  /**
   * Report when a DOM element or a component uses both children and dangerouslySetInnerHTML prop.
   */
  noDangerouslySetInnerHtmlWithChildren?: RuleConfiguration | null;
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null;
  [k: string]: unknown;
}
/**
 * A list of rules that belong to this group
 */
export interface Style {
  /**
   * It enables ALL rules for this group.
   */
  all?: boolean | null;
  /**
   * Disallow the use of arguments.
   */
  noArguments?: RuleConfiguration | null;
  /**
   * Disallow comma operator.
   */
  noCommaOperator?: RuleConfiguration | null;
  /**
   * Disallow default exports.
   */
  noDefaultExport?: RuleConfiguration | null;
  /**
   * Disallow implicit true values on JSX boolean attributes
   */
  noImplicitBoolean?: RuleConfiguration | null;
  /**
   * Disallow type annotations for variables, parameters, and class properties initialized with a literal expression.
   */
  noInferrableTypes?: RuleConfiguration | null;
  /**
   * Disallow the use of TypeScript's namespaces.
   */
  noNamespace?: RuleConfiguration | null;
  /**
   * Disallow negation in the condition of an if statement if it has an else clause.
   */
  noNegationElse?: RuleConfiguration | null;
  /**
   * Disallow non-null assertions using the ! postfix operator.
   */
  noNonNullAssertion?: RuleConfiguration | null;
  /**
   * Disallow reassigning function parameters.
   */
  noParameterAssign?: RuleConfiguration | null;
  /**
   * Disallow the use of parameter properties in class constructors.
   */
  noParameterProperties?: RuleConfiguration | null;
  /**
   * This rule allows you to specify global variable names that you don’t want to use in your application.
   */
  noRestrictedGlobals?: RuleConfiguration | null;
  /**
   * Disallow the use of constants which its value is the upper-case version of its name.
   */
  noShoutyConstants?: RuleConfiguration | null;
  /**
   * Disallow template literals if interpolation and special-character handling are not needed
   */
  noUnusedTemplateLiteral?: RuleConfiguration | null;
  /**
   * Disallow else block when the if block breaks early.
   */
  noUselessElse?: RuleConfiguration | null;
  /**
   * Disallow the use of var
   */
  noVar?: RuleConfiguration | null;
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null;
  /**
   * Enforce the use of as const over literal type and type annotation.
   */
  useAsConstAssertion?: RuleConfiguration | null;
  /**
   * Requires following curly brace conventions.
   */
  useBlockStatements?: RuleConfiguration | null;
  /**
   * Enforce using else if instead of nested if in else clauses.
   */
  useCollapsedElseIf?: RuleConfiguration | null;
  /**
   * Require const declarations for variables that are never reassigned after declared.
   */
  useConst?: RuleConfiguration | null;
  /**
   * Enforce default function parameters and optional function parameters to be last.
   */
  useDefaultParameterLast?: RuleConfiguration | null;
  /**
   * Require that each enum member value be explicitly initialized.
   */
  useEnumInitializers?: RuleConfiguration | null;
  /**
   * Disallow the use of Math.pow in favor of the ** operator.
   */
  useExponentiationOperator?: RuleConfiguration | null;
  /**
   * This rule enforces the use of <>...</> over <Fragment>...</Fragment>.
   */
  useFragmentSyntax?: RuleConfiguration | null;
  /**
   * Require all enum members to be literal values.
   */
  useLiteralEnumMembers?: RuleConfiguration | null;
  /**
   * Enforce naming conventions for everything across a codebase.
   */
  useNamingConvention?: RuleConfiguration | null;
  /**
   * Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
   */
  useNumericLiterals?: RuleConfiguration | null;
  /**
   * Prevent extra closing tags for components without children
   */
  useSelfClosingElements?: RuleConfiguration | null;
  /**
   * When expressing array types, this rule promotes the usage of T[] shorthand instead of Array<T>.
   */
  useShorthandArrayType?: RuleConfiguration | null;
  /**
   * Require assignment operator shorthand where possible.
   */
  useShorthandAssign?: RuleConfiguration | null;
  /**
   * Enforces switch clauses have a single statement, emits a quick fix wrapping the statements in a block.
   */
  useSingleCaseStatement?: RuleConfiguration | null;
  /**
   * Disallow multiple variable declarations in the same variable statement
   */
  useSingleVarDeclarator?: RuleConfiguration | null;
  /**
   * Prefer template literals over string concatenation.
   */
  useTemplate?: RuleConfiguration | null;
  /**
   * Enforce the use of while loops instead of for loops when the initializer and update expressions are not needed.
   */
  useWhile?: RuleConfiguration | null;
  [k: string]: unknown;
}
/**
 * A list of rules that belong to this group
 */
export interface Suspicious {
  /**
   * It enables ALL rules for this group.
   */
  all?: boolean | null;
  /**
   * Usually, the definition in the standard library is more precise than what people come up with or the used constant exceeds the maximum precision of the number type.
   */
  noApproximativeNumericConstant?: RuleConfiguration | null;
  /**
   * Discourage the usage of Array index in keys.
   */
  noArrayIndexKey?: RuleConfiguration | null;
  /**
   * Disallow assignments in expressions.
   */
  noAssignInExpressions?: RuleConfiguration | null;
  /**
   * Disallows using an async function as a Promise executor.
   */
  noAsyncPromiseExecutor?: RuleConfiguration | null;
  /**
   * Disallow reassigning exceptions in catch clauses.
   */
  noCatchAssign?: RuleConfiguration | null;
  /**
   * Disallow reassigning class members.
   */
  noClassAssign?: RuleConfiguration | null;
  /**
   * Prevent comments from being inserted as text nodes
   */
  noCommentText?: RuleConfiguration | null;
  /**
   * Disallow comparing against -0
   */
  noCompareNegZero?: RuleConfiguration | null;
  /**
   * Disallow labeled statements that are not loops.
   */
  noConfusingLabels?: RuleConfiguration | null;
  /**
   * Disallow void type outside of generic or return types.
   */
  noConfusingVoidType?: RuleConfiguration | null;
  /**
   * Disallow the use of console.log
   */
  noConsoleLog?: RuleConfiguration | null;
  /**
   * Disallow TypeScript const enum
   */
  noConstEnum?: RuleConfiguration | null;
  /**
   * Prevents from having control characters and some escape sequences that match control characters in regular expressions.
   */
  noControlCharactersInRegex?: RuleConfiguration | null;
  /**
   * Disallow the use of debugger
   */
  noDebugger?: RuleConfiguration | null;
  /**
   * Require the use of === and !==
   */
  noDoubleEquals?: RuleConfiguration | null;
  /**
   * Disallow duplicate case labels.
   */
  noDuplicateCase?: RuleConfiguration | null;
  /**
   * Disallow duplicate class members.
   */
  noDuplicateClassMembers?: RuleConfiguration | null;
  /**
   * Prevents JSX properties to be assigned multiple times.
   */
  noDuplicateJsxProps?: RuleConfiguration | null;
  /**
   * Prevents object literals having more than one property declaration for the same name.
   */
  noDuplicateObjectKeys?: RuleConfiguration | null;
  /**
   * Disallow duplicate function parameter name.
   */
  noDuplicateParameters?: RuleConfiguration | null;
  /**
   * Disallow the declaration of empty interfaces.
   */
  noEmptyInterface?: RuleConfiguration | null;
  /**
   * Disallow the any type usage.
   */
  noExplicitAny?: RuleConfiguration | null;
  /**
   * Prevents the wrong usage of the non-null assertion operator (!) in TypeScript files.
   */
  noExtraNonNullAssertion?: RuleConfiguration | null;
  /**
   * Disallow fallthrough of switch clauses.
   */
  noFallthroughSwitchClause?: RuleConfiguration | null;
  /**
   * Disallow reassigning function declarations.
   */
  noFunctionAssign?: RuleConfiguration | null;
  /**
   * Use Number.isFinite instead of global isFinite.
   */
  noGlobalIsFinite?: RuleConfiguration | null;
  /**
   * Use Number.isNaN instead of global isNaN.
   */
  noGlobalIsNan?: RuleConfiguration | null;
  /**
   * Disallow use of implicit any type on variable declarations.
   */
  noImplicitAnyLet?: RuleConfiguration | null;
  /**
   * Disallow assigning to imported bindings
   */
  noImportAssign?: RuleConfiguration | null;
  /**
   * Disallow labels that share a name with a variable
   */
  noLabelVar?: RuleConfiguration | null;
  /**
   * Enforce proper usage of new and constructor.
   */
  noMisleadingInstantiator?: RuleConfiguration | null;
  /**
   * Disallow shorthand assign when variable appears on both sides.
   */
  noMisrefactoredShorthandAssign?: RuleConfiguration | null;
  /**
   * Disallow direct use of Object.prototype builtins.
   */
  noPrototypeBuiltins?: RuleConfiguration | null;
  /**
   * Disallow variable, function, class, and type redeclarations in the same scope.
   */
  noRedeclare?: RuleConfiguration | null;
  /**
   * Prevents from having redundant "use strict".
   */
  noRedundantUseStrict?: RuleConfiguration | null;
  /**
   * Disallow comparisons where both sides are exactly the same.
   */
  noSelfCompare?: RuleConfiguration | null;
  /**
   * Disallow identifiers from shadowing restricted names.
   */
  noShadowRestrictedNames?: RuleConfiguration | null;
  /**
   * Disallow sparse arrays
   */
  noSparseArray?: RuleConfiguration | null;
  /**
   * Disallow unsafe declaration merging between interfaces and classes.
   */
  noUnsafeDeclarationMerging?: RuleConfiguration | null;
  /**
   * Disallow using unsafe negation.
   */
  noUnsafeNegation?: RuleConfiguration | null;
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null;
  /**
   * Enforce default clauses in switch statements to be last
   */
  useDefaultSwitchClauseLast?: RuleConfiguration | null;
  /**
   * Enforce get methods to always return a value.
   */
  useGetterReturn?: RuleConfiguration | null;
  /**
   * Use Array.isArray() instead of instanceof Array.
   */
  useIsArray?: RuleConfiguration | null;
  /**
   * Require using the namespace keyword over the module keyword to declare TypeScript namespaces.
   */
  useNamespaceKeyword?: RuleConfiguration | null;
  /**
   * This rule verifies the result of typeof $expr unary expressions is being compared to valid values, either string literals containing valid type names or other typeof expressions
   */
  useValidTypeof?: RuleConfiguration | null;
  [k: string]: unknown;
}
export interface OrganizeImports {
  /**
   * Enables the organization of imports
   */
  enabled?: boolean | null;
  /**
   * A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns.
   */
  ignore?: StringSet | null;
  /**
   * A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns.
   */
  include?: StringSet | null;
}
export interface OverridePattern {
  /**
   * Specific configuration for the Css language
   */
  css?: CssConfiguration | null;
  /**
   * Specific configuration for the Json language
   */
  formatter?: OverrideFormatterConfiguration | null;
  /**
   * A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns.
   */
  ignore?: StringSet | null;
  /**
   * A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns.
   */
  include?: StringSet | null;
  /**
   * Specific configuration for the JavaScript language
   */
  javascript?: JavascriptConfiguration | null;
  /**
   * Specific configuration for the Json language
   */
  json?: JsonConfiguration | null;
  /**
   * Specific configuration for the Json language
   */
  linter?: OverrideLinterConfiguration | null;
  /**
   * Specific configuration for the Json language
   */
  organizeImports?: OverrideOrganizeImportsConfiguration | null;
}
export interface OverrideFormatterConfiguration {
  enabled?: boolean | null;
  /**
   * Stores whether formatting should be allowed to proceed if a given file has syntax errors
   */
  formatWithErrors?: boolean | null;
  /**
   * The size of the indentation, 2 by default (deprecated, use `indent-width`)
   */
  indentSize?: number | null;
  /**
   * The indent style.
   */
  indentStyle?: PlainIndentStyle | null;
  /**
   * The size of the indentation, 2 by default
   */
  indentWidth?: number | null;
  /**
   * The type of line ending.
   */
  lineEnding?: LineEnding | null;
  /**
   * What's the max width of a line. Defaults to 80.
   */
  lineWidth?: LineWidth | null;
}
export interface OverrideLinterConfiguration {
  /**
   * if `false`, it disables the feature and the linter won't be executed. `true` by default
   */
  enabled?: boolean | null;
  /**
   * List of rules
   */
  rules?: Rules | null;
}
export interface OverrideOrganizeImportsConfiguration {
  /**
   * if `false`, it disables the feature and the linter won't be executed. `true` by default
   */
  enabled?: boolean | null;
}
/**
 * Set of properties to integrate Biome with a VCS software.
 */
export interface VcsConfiguration {
  /**
   * The kind of client.
   */
  clientKind?: VcsClientKind | null;
  /**
   * The main branch of the project
   */
  defaultBranch?: string | null;
  /**
   * Whether Biome should integrate itself with the VCS client
   */
  enabled?: boolean | null;
  /**
   * The folder where Biome should check for VCS files. By default, Biome will use the same folder where `biome.json` was found.
   *
   * If Biome can't find the configuration, it will attempt to use the current working directory. If no current working directory can't be found, Biome won't use the VCS integration, and a diagnostic will be emitted
   */
  root?: string | null;
  /**
   * Whether Biome should use the VCS ignore file. When [true], Biome will ignore the files specified in the ignore file.
   */
  useIgnoreFile?: boolean | null;
}
