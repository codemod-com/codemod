version: '3.9'
services:
  backend:
    build:
      context: ../..
      dockerfile: apps/backend/Dockerfile
    environment:
      PORT: ${PORT}
      NODE_ENV: ${NODE_ENV}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_PUBLIC_BUCKET_NAME: ${AWS_PUBLIC_BUCKET_NAME}
      AWS_PRIVATE_BUCKET_NAME: ${AWS_PRIVATE_BUCKET_NAME}
      DATABASE_URI: "postgresql://postgres:postgres@database:5432/codemod?schema=public"
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      TASK_MANAGER_QUEUE_NAME: ${TASK_MANAGER_QUEUE_NAME}
      SLACK_TOKEN: ${SLACK_TOKEN}
      SLACK_CHANNEL: ${SLACK_CHANNEL}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      FRONTEND_URL: ${FRONTEND_URL}
    depends_on:
      database:
        condition: service_healthy
    ports:
      - '8081:8081'
    networks:
      - codemod-network

  database:
    image: 'postgres:16'
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'codemod'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '5432:5432'
    networks:
      - codemod-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - codemod-network

networks:
  codemod-network:
    driver: bridge
