generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

generator json {
  provider = "prisma-json-types-generator"
}

generator zod {
  provider                         = "zod-prisma-types"
  createOptionalDefaultValuesTypes = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model Codemod {
  id             Int              @id @default(autoincrement())
  slug           String           @unique @db.VarChar(255)
  name           String           @unique @db.VarChar(255)
  featured       Boolean          @default(false)
  verified       Boolean          @default(false)
  private        Boolean
  author         String           @db.VarChar(255)
  versions       CodemodVersion[]
  amountOfUses   Int              @default(0)
  totalTimeSaved Int              @default(0)
  openedPrs      Int              @default(0)
  // Synced from Sanity
  labels         String[]         @default([])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model CodemodVersion {
  id                       Int      @id @default(autoincrement())
  version                  String   @db.VarChar(255)
  shortDescription         String   @db.Text
  engine                   String   @db.VarChar(255)
  /// [ApplicabilityCriteria]
  applicability            Json?
  vsCodeLink               String   @db.VarChar(255)
  codemodStudioExampleLink String?  @db.VarChar(255)
  testProjectCommand       String?  @db.VarChar(255)
  sourceRepo               String?  @db.VarChar(255)
  amountOfUses             Int      @default(0)
  totalTimeSaved           Int      @default(0)
  openedPrs                Int      @default(0)
  bucketLink               String   @db.VarChar(255)
  useCaseCategory          String?  @db.VarChar(255)
  tags                     String[] @default([])
  codemodId                Int
  codemod                  Codemod  @relation(fields: [codemodId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt
}

model Tag {
  id             Int      @id @default(autoincrement())
  title          String   @unique @db.VarChar(255)
  aliases        String[]
  classification String   @db.VarChar(255)
  displayName    String   @db.VarChar(255)
  // TODO: enterprise feature
  // owners         User[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
}

model TokenMetadata {
  pepperedAccessTokenHashDigest String @id @map("pathd") @db.VarChar(27)
  backendInitializationVector   String @map("biv") @db.VarChar(22)
  encryptedUserId               String @map("euid") @db.VarChar(64)
  createdAt                     BigInt @map("ca")
  expiresAt                     BigInt @map("ea")
  claims                        BigInt @map("c")
  signature                     String @map("s") @db.VarChar(43)
}

model TokenRevocation {
  pepperedAccessTokenHashDigest String @id @map("pathd") @db.VarChar(27)
  revokedAt                     BigInt @map("r")
  signature                     String @map("s") @db.VarChar(43)
}
