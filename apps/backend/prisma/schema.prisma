generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

generator zod {
  provider                         = "zod-prisma-types"
  createOptionalDefaultValuesTypes = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

enum CodemodType {
  recipe
  codemod
}

model Codemod {
  id             Int              @id @default(autoincrement())
  slug           String           @unique @db.VarChar(255)
  type           CodemodType
  name           String           @unique @db.VarChar(255)
  featured       Boolean          @default(false)
  verified       Boolean          @default(false)
  private        Boolean
  author         String           @db.VarChar(255)
  versions       CodemodVersion[]
  amountOfUses   Int              @default(0)
  totalTimeSaved Int              @default(0)
  openedPrs      Int              @default(0)
  labels         String[]         @default([])
  from           String?          @db.VarChar(255)
  to             String?          @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model CodemodVersion {
  id                       Int      @id @default(autoincrement())
  version                  String   @db.VarChar(255)
  shortDescription         String   @db.Text
  engine                   String   @db.VarChar(255)
  requirements             String?  @db.VarChar(255)
  vsCodeLink               String   @db.VarChar(255)
  codemodStudioExampleLink String?  @db.VarChar(255)
  testProjectCommand       String?  @db.VarChar(255)
  sourceRepo               String   @db.VarChar(255)
  amountOfUses             Int      @default(0)
  totalTimeSaved           Int      @default(0)
  openedPrs                Int      @default(0)
  bucketLink               String   @db.VarChar(255)
  codemodId                Int
  codemod                  Codemod  @relation(fields: [codemodId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt
}
