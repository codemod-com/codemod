
import type { API, FileInfo, Options } from 'jscodeshift';

function transform(file: FileInfo, api: API, options: Options): string | undefined {
    const j = api.jscodeshift;

    const root = j(file.source);

    let dirtyFlag = false;

    root.find(j.ImportDeclaration, {
        source: { value: 'state' },
    }).forEach((path) => {
        path.value.source.value = 'state';
        path.value.specifiers.push(j.importSpecifier(j.identifier('State')));
        dirtyFlag = true;
    });

    if (!dirtyFlag) {
        const mapStateToPropsNode = root.find(j.ArrowFunctionExpression, {
            body: {
                type: 'ObjectExpression',
            },
        });

        mapStateToPropsNode.forEach((path) => {
            const stateParam = path.value.params[0];
            if (stateParam.typeAnnotation) {
                const stateType = stateParam.typeAnnotation.typeAnnotation;
                const importDeclaration = j.importDeclaration(
                    [j.importSpecifier(j.identifier(stateType.typeAnnotation.id.name))],
                    j.stringLiteral('state')
                );
                root.find(j.Program).get('body', 0).insertBefore(importDeclaration);
                stateParam.typeAnnotation = null;
            }
        });

        return root.toSource(options);
    }

    return undefined;
}

export default transform;
