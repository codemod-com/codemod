
import type { API, FileInfo, Options } from 'jscodeshift';

function transform(file: FileInfo, api: API, options: Options): string | undefined {
    const j = api.jscodeshift;

    const root = j(file.source);

    let dirtyFlag = false;

    root.find(j.TSTypeAnnotation, {
        typeAnnotation: {
            type: 'TSTypeReference',
            typeName: {
                type: 'Identifier',
                name: 'State',
            },
        },
    }).forEach((path) => {
        const importDeclaration = j.importDeclaration(
            [j.importSpecifier(j.identifier('State'), j.identifier('State'))],
            j.stringLiteral('state'),
        );

        const existingImports = root.find(j.ImportDeclaration, {
            source: { value: 'state' },
        });

        if (existingImports.length === 0) {
            root.find(j.Program).get('body', 0).insertBefore(importDeclaration);
            dirtyFlag = true;
        }
    });

    if (dirtyFlag) {
        return root.toSource(options);
    }

    return undefined;
}

export default transform;
