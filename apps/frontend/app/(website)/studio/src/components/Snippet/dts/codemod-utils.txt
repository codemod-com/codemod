// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../jscodeshift

declare module '@codemod.com/codemod-utils' {
    import type { ASTPath, ClassDeclaration, ClassMethod, ClassProperty, Collection, ImportDeclaration, ImportDefaultSpecifier, ImportNamespaceSpecifier, ImportSpecifier, FunctionDeclaration, FunctionExpression, ArrowFunctionExpression, JSCodeshift } from "jscodeshift";

    /**
        * Retrieves a named import specifier from an import declaration.
        * @param j - The JSCodeshift API.
        * @param importDeclaration - The import declaration to search.
        * @param name - The imported name of the named import to retrieve.
        * @returns The import specifier if found, otherwise null.
        */
    export const getNamedImport: (j: JSCodeshift, importDeclaration: ASTPath<ImportDeclaration>, name: string) => ImportSpecifier | null;
    /**
        * Retrieves the default import specifier from an import declaration.
        * @param j - The JSCodeshift API.
        * @param importDeclaration - The import declaration to search.
        * @returns The default import specifier if found, otherwise null.
        */
    export const getDefaultImport: (j: JSCodeshift, importDeclaration: ASTPath<ImportDeclaration>) => ImportDefaultSpecifier | null;
    /**
        * Retrieves the namespace import specifier from an import declaration.
        * @param j - The JSCodeshift API.
        * @param importDeclaration - The import declaration to search.
        * @returns The namespace import specifier if found, otherwise null.
        */
    export const getNamespaceImport: (j: JSCodeshift, importDeclaration: ASTPath<ImportDeclaration>) => ImportNamespaceSpecifier | null;
    /**
        * Renames the default import specifier in an import declaration.
        * @param j - The JSCodeshift API.
        * @param newName - The new name for the default import.
        * @param importDeclaration - The import declaration to modify.
        * @returns True if the import declaration was modified, otherwise false.
        */
    export const renameDefaultImport: (j: JSCodeshift, newName: string, importDeclaration: ASTPath<ImportDeclaration>) => boolean;
    /**
        * Adds named import specifiers to an import declaration.
        * @param j - The JSCodeshift API.
        * @param names - The names of the imports to add.
        * @param importDeclaration - The import declaration to modify.
        * @returns True if the import declaration was modified, otherwise false.
        */
    export const addNamedImports: (j: JSCodeshift, names: string[], importDeclaration: ASTPath<ImportDeclaration>) => boolean;
    /**
        * Removes named import specifiers from an import declaration.
        * @param j - The JSCodeshift API.
        * @param names - The names of the imports to remove.
        * @param importDeclaration - The import declaration to modify.
        * @returns True if the import declaration was modified, otherwise false.
        */
    export const removeNamedImports: (j: JSCodeshift, names: string[], importDeclaration: ASTPath<ImportDeclaration>) => boolean;
    /**
        * Removes the default import specifier from an import declaration.
        * @param j - The JSCodeshift API.
        * @param importDeclaration - The import declaration to modify.
        * @returns True if the import declaration was modified, otherwise false.
        */
    export const removeDefaultImport: (j: JSCodeshift, importDeclaration: ASTPath<ImportDeclaration>) => boolean;
    /**
        * Removes the namespace import specifier from an import declaration.
        * @param j - The JSCodeshift API.
        * @param importDeclaration - The import declaration to modify.
        * @returns True if the import declaration was modified, otherwise false.
        */
    export const removeNamespaceImport: (j: JSCodeshift, importDeclaration: ASTPath<ImportDeclaration>) => boolean;
    /**
        * Removes unused import specifiers from an import declaration.
        * @param j - The JSCodeshift API.
        * @param root - The root collection to search.
        * @param importDeclaration - The import declaration to modify.
        */
    export const removeUnusedSpecifiers: (j: JSCodeshift, root: Collection, importDeclaration: ASTPath<ImportDeclaration>) => boolean;
    type ImportDeclarationNames = {
            importDefaultSpecifierName: string | null;
            importNamespaceSpecifierName: string | null;
            importSpecifierLocalNames: Map<string, string>;
    };
    /**
        * Extracts the local names of import specifiers from an import declaration.
        *
        * @param j - The JSCodeshift library.
        * @param importDeclaration - The import declaration path.
        * @returns An object containing the local names of import specifiers,
        *          the name of the default import specifier, and the name of the namespace import specifier.
        */
    export const getImportDeclarationNames: (j: JSCodeshift, importDeclaration: ASTPath<ImportDeclaration>) => ImportDeclarationNames;
    /**
        * Checks if an import declaration has a specified local name.
        * import { a as b } from 'lib' // "a" is imported name, "b" is local name
        *
        * @param j - The JSCodeshift library.
        * @param name - The local name to check for.
        * @param importDeclaration - The import declaration path.
        * @returns True if the import declaration contains the specified local name, false otherwise.
        */
    export const importDeclarationHasLocalName: (j: JSCodeshift, name: string, importDeclaration: ASTPath<ImportDeclaration>) => boolean;
    /**
        * Retrieves the local name of a named import from an ImportDeclaration.
        *
        * @param j - The JSCodeshift API object used for AST manipulation.
        * @param name - The local name of the named import to look for.
        * @param importDeclaration - The ImportDeclaration AST node to search within.
        * @returns The local name of the named import if found, otherwise undefined.
        */
    export const getNamedImportLocalName: (j: JSCodeshift, name: string, importDeclaration: ASTPath<ImportDeclaration>) => string | null;
    export {};
  
    export const getClassMethod: (j: JSCodeshift, klass: ASTPath<ClassDeclaration>, name: string) => ASTPath<ClassMethod> | null;
    export const getClassProperty: (j: JSCodeshift, klass: ASTPath<ClassDeclaration>, name: string) => ASTPath<ClassProperty> | null;

    export const getCalleeName: (j: JSCodeshift, callee: Expression) => string | null | undefined;
    /**
        * Retrieves all CallExpression nodes from the root Collection that use functions imported by the given ImportDeclaration.
        *
        * @param j - The JSCodeshift API object used for AST manipulation.
        * @param root - The root Collection representing the AST of the source code.
        * @param importDeclaration - The ImportDeclaration AST node to match the imported functions against.
        * @returns A Collection of CallExpression nodes that correspond to the imported functions.
        */
    export const getCallExpressionsByImport: (j: JSCodeshift, root: Collection<any>, importDeclaration: ASTPath<ImportDeclaration>) => Collection<CallExpression>;
    /**
        * Checks if the callee of a CallExpression is imported from the given ImportDeclaration.
        *
        * @param j - The JSCodeshift API object used for AST manipulation.
        * @param importDeclaration - The ImportDeclaration AST node to match the imported functions against.
        * @param callExpression - The CallExpression AST node whose callee is being checked.
        * @returns A boolean indicating whether the callee is imported from the given ImportDeclaration.
        */
    export const isCalleeImportedFromImportDeclaration: (j: JSCodeshift, importDeclaration: ASTPath<ImportDeclaration>, callExpression: ASTPath<CallExpression>) => boolean;
    /**
        * Checks if the given CallExpression is a known method call from a given library.
        *
        * @param j - The JSCodeshift API object used for AST manipulation.
        * @param callExpression - The CallExpression AST node being checked.
        * @param importDeclaration - The ImportDeclaration AST node to match the imported functions against.
        * @param knownMethodNames - An array of method names known to be imported from the library.
        * @returns A boolean indicating whether the CallExpression is a method call from the known library.
        */
    export const isCallExpressionLibraryMethod: (j: JSCodeshift, callExpression: ASTPath<CallExpression>, importDeclaration: ASTPath<ImportDeclaration>, knownMethodNames: string[]) => boolean;
    /**
        * Retrieves all React class components from the root Collection.
        *
        * @param j - The JSCodeshift API object used for AST manipulation.
        * @param root - The root Collection representing the AST of the source code.
        * @returns A Collection of ClassDeclaration nodes representing React class components, or null if no React import is found.
        */
    export const getClassComponents: (j: JSCodeshift, root: Collection<any>) => Collection<ClassDeclaration> | null;
    /**
        * Retrieves all function components from the root Collection.
        *
        * @param j - The JSCodeshift API object used for AST manipulation.
        * @param root - The root Collection representing the AST of the source code.
        * @returns An array of ASTPath nodes representing function components.
        */
    export const getFunctionComponents: (j: JSCodeshift, root: Collection) => import("jscodeshift/src/Collection.js").Collection<any>;
    /**
        * Checks if a given FunctionLike node is a React function component.
        *
        * @param j - The JSCodeshift API object used for AST manipulation.
        * @param maybeComponent - The ASTPath of the FunctionLike node to check.
        * @returns A boolean indicating whether the node is a React function component.
        */
    export const isReactFunctionComponent: (j: JSCodeshift, maybeComponent: ASTPath<FunctionLike>) => boolean | "" | null;
 /**
        * Gets the first import declaration with the specified source value.
        *
        * @param j - The JSCodeshift API.
        * @param root - The root collection of the AST.
        * @param name - The source value to match against import declarations.
        * @returns The AST path of the matching import declaration, or null if not found.
        */
    export const getImportDeclaration: (j: JSCodeshift, root: Collection<File>, name: string) => ASTPath<ImportDeclaration> | null;
    /**
        * Adds an import declaration with the specified source value if it doesn't already exist.
        *
        * @param j - The JSCodeshift API.
        * @param root - The root collection of the AST.
        * @param name - The source value for the new import declaration.
        * @returns The AST path of the existing or newly added import declaration.
        */
    export const addImportDeclaration: (j: JSCodeshift, root: Collection<File>, name: string) => ASTPath<ImportDeclaration>;
    /**
        * Inserts statements after the last import declaration in the program body.
        *
        * @param j - The JSCodeshift API.
        * @param root - The root collection of the AST.
        * @param statements - The statements to insert after the import declarations.
        */
    export const insertStatementAfterImports: (j: JSCodeshift, root: Collection<File>, statements: any[]) => void;
    /**
        * Gets the first default export declaration in the AST.
        *
        * @param j - The JSCodeshift API.
        * @param root - The root collection of the AST.
        * @returns The AST path of the default export declaration, or null if not found.
        */
    export const getDefaultExport: (j: JSCodeshift, root: Collection<any>) => ASTPath<ExportDefaultDeclaration> | null;
    /**
        * Checks if the given path is defined in the global scope.
        *
        * @param j - The JSCodeshift API.
        * @param path - The AST path to check.
        * @returns True if the path is defined in the global scope, false otherwise.
        */
    export const isDefinedInGlobalScope: (j: JSCodeshift, path: ASTPath<any>) => boolean;
     export type FunctionLike = FunctionDeclaration | FunctionExpression | ArrowFunctionExpression;
    /**
        * Retrieves the name of a function-like node.
        *
        * @param j - The JSCodeshift instance.
        * @param path - The AST path to the function-like node.
        * @returns The name of the function, or null if it has no name.
        */
    export const getFunctionName: (j: JSCodeshift, path: ASTPath<FunctionLike>) => string | null;
    /**
        * Checks if a function-like node is exported as the default export.
        *
        * @param j - The JSCodeshift instance.
        * @param root - The root collection of the AST.
        * @param path - The AST path to the function-like node.
        * @returns True if the function is exported as the default export, false otherwise.
        */
    export const isFunctionExportedByDefault: (j: JSCodeshift, root: Collection<any>, path: ASTPath<FunctionLike>) => boolean;
}


